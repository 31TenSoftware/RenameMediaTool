<?xml version="1.0" encoding="UTF-8"?>

<project name="renamemediatool" default="all">


    <!-- ====================================================================================== -->
    <!-- Property Files                                                                       -->
    <!-- ====================================================================================== -->
    <property file="build.properties"/>


    <!-- ====================================================================================== -->
    <!-- Compiler Options                                                                       -->
    <!-- ====================================================================================== -->
    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.max.memory" value="700m"/>
    <patternset id="ignored.files">
        <exclude name="**/*.hprof/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/*.rbc/**"/>
        <exclude name="**/*.yarb/**"/>
        <exclude name="**/*~/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/.hg/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/CVS/**"/>
        <exclude name="**/RCS/**"/>
        <exclude name="**/SCCS/**"/>
        <exclude name="**/__pycache__/**"/>
        <exclude name="**/_svn/**"/>
        <exclude name="**/rcs/**"/>
        <exclude name="**/vssver.scc/**"/>
        <exclude name="**/vssver2.scc/**"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.war"/>
        <include name="*.swc"/>
        <include name="*.apk"/>
        <include name="*.zip"/>
        <include name="*.ear"/>
        <include name="*.egg"/>
        <include name="*.ane"/>
        <include name="*.jar"/>
    </patternset>
    <patternset id="compiler.resources">
        <exclude name="**/?*.java"/>
        <exclude name="**/?*.form"/>
        <exclude name="**/?*.class"/>
        <exclude name="**/?*.groovy"/>
        <exclude name="**/?*.scala"/>
        <exclude name="**/?*.flex"/>
        <exclude name="**/?*.kt"/>
        <exclude name="**/?*.clj"/>
    </patternset>


    <!-- ====================================================================================== -->
    <!-- Project Libraries                                                                      -->
    <!-- ====================================================================================== -->
    <path id="library.org.apache.sanselan:sanselan:0.97-incubator.classpath">
        <pathelement
                location="${path.variable.maven_repository}/org/apache/sanselan/sanselan/0.97-incubator/sanselan-0.97-incubator.jar"/>
    </path>


    <!-- ====================================================================================== -->
    <!-- Modules                                                                                -->
    <!-- ====================================================================================== -->
    <!-- Module RenameMediaTool -->
    <!-- read this for more info on ant.file and basedir https://ant.apache.org/manual/properties.html -->
    <dirname property="module.renamemediatool.basedir" file="${ant.file}"/>

    <!-- Application Version -->
    <property name="application.version"
              value="0.2.0"/>

    <property name="compiler.args.renamemediatool"
              value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
    <property name="renamemediatool.output.dir"
              value="${module.renamemediatool.basedir}/out/production/RenameMediaTool"/>
    <property name="renamemediatool.testoutput.dir"
              value="${module.renamemediatool.basedir}/out/test/RenameMediaTool"/>
    <property name="artifact.output.renamemediatool"
              value="${basedir}/out/artifacts/RenameMediaTool"/>
    <property name="artifact.output.renamemediatool.javafx"
              value="${artifact.output.renamemediatool}/javafx"/>
    <property name="artifact.output.renamemediatool.jar"
              value="${artifact.output.renamemediatool}/jar"/>

    <path id="renamemediatool.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="renamemediatool.module.production.classpath">
        <path refid="library.org.apache.sanselan:sanselan:0.97-incubator.classpath"/>
    </path>

    <patternset id="excluded.from.module.renamemediatool">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation.renamemediatool">
        <patternset refid="excluded.from.module.renamemediatool"/>
    </patternset>

    <path id="renamemediatool.module.sourcepath">
        <dirset dir="${module.renamemediatool.basedir}">
            <include name="src"/>
        </dirset>
    </path>


    <!-- ====================================================================================== -->
    <!-- Build Targets                                                                          -->
    <!-- ====================================================================================== -->
    <target name="all"
            depends="build.modules, build.all.artifacts"
            description="build all"/>

    <target name="build.modules"
            depends="init, clean, compile.module.renamemediatool"
            description="build all modules"/>

    <target name="init"
            description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="clean"
            depends="clean.module.renamemediatool, clean.artifacts.renamemediatool"
            description="cleanup all"/>

    <target name="clean.module.renamemediatool"
            description="cleanup module">
        <delete dir="${renamemediatool.output.dir}"/>
        <delete dir="${renamemediatool.testoutput.dir}"/>
    </target>

    <target name="clean.artifacts.renamemediatool"
            depends="clean.artifact.renamemediatool.javafx, clean.artifact.renamemediatool.jar"
            description="cleanup all artifacts">
        <delete dir="${artifact.output.renamemediatool}"/>
    </target>

    <target name="clean.artifact.renamemediatool.javafx"
            description="clean RenameMediaTool javafx artifact output">
        <delete dir="${artifact.output.renamemediatool.javafx}"/>
    </target>

    <target name="clean.artifact.renamemediatool.jar"
            description="clean RenameMediaTool javafx artifact output">
        <delete dir="${artifact.output.renamemediatool.jar}"/>
    </target>

    <target name="compile.module.renamemediatool"
            depends="compile.module.renamemediatool.production, compile.module.renamemediatool.tests"
            description="Compile module RenameMediaTool"/>

    <target name="compile.module.renamemediatool.production"
            description="Compile module RenameMediaTool; production classes">
        <mkdir dir="${renamemediatool.output.dir}"/>
        <javac destdir="${renamemediatool.output.dir}"
               debug="${compiler.debug}"
               nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}"
               fork="true">
            <compilerarg line="${compiler.args.renamemediatool}"/>
            <bootclasspath refid="renamemediatool.module.bootclasspath"/>
            <classpath refid="renamemediatool.module.production.classpath"/>
            <src refid="renamemediatool.module.sourcepath"/>
            <patternset refid="excluded.from.compilation.renamemediatool"/>
        </javac>

        <copy todir="${renamemediatool.output.dir}">
            <fileset dir="${module.renamemediatool.basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.renamemediatool.tests"
            depends="compile.module.renamemediatool.production"
            description="compile module RenameMediaTool; test classes"
            unless="skip.tests"/>

    <target name="build.all.artifacts"
            depends="artifact.renamemediatool.javafx, artifact.renamemediatool.jar"
            description="Build all artifacts">
        <!-- Delete temporary files -->
        <delete dir="${artifacts.temp.dir}"/>
    </target>

    <target name="init.artifacts"
            description="init artifacts">
        <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
        <mkdir dir="${artifacts.temp.dir}"/>
    </target>

    <target name="init.artifact.renamemediatool.javafx"
            depends="init.artifacts">
        <property name="artifact.output.temp.RenameMediaTool.javafx"
                  value="${artifacts.temp.dir}/javafx/RenameMediaTool.jar"/>
        <taskdef resource="com/sun/javafx/tools/ant/antlib.xml"
                 uri="javafx:com.sun.javafx.tools.ant"
                 classpath="${jdk.home.1.8}/lib/ant-javafx.jar"/>
    </target>

    <target name="artifact.renamemediatool.javafx"
            depends="init.artifact.renamemediatool.javafx, clean.artifact.renamemediatool.javafx, compile.module.renamemediatool"
            description="Build &#39;RenameMediaTool javafx&#39; artifact"
            xmlns:fx="javafx:com.sun.javafx.tools.ant">
        <mkdir dir="${artifact.output.renamemediatool.javafx}"/>
        <copy todir="${artifact.output.temp.RenameMediaTool.javafx}">
            <fileset dir="${renamemediatool.output.dir}"/>

            <!-- copy uncompiled source into output jar directory as well -->
            <fileset dir="${module.renamemediatool.basedir}/src"/>
        </copy>
        <copy file="${path.variable.maven_repository}/org/apache/sanselan/sanselan/0.97-incubator/sanselan-0.97-incubator.jar"
              tofile="${artifact.output.temp.RenameMediaTool.javafx}/sanselan-0.97-incubator.jar"/>
        <fx:fileset id="all_but_RenameMediaTool"
                    dir="${artifact.output.temp.RenameMediaTool.javafx}"
                    includes="**/*.jar">
            <exclude name="RenameMediaTool.jar"/>
        </fx:fileset>
        <fx:fileset id="all_RenameMediaTool"
                    dir="${artifact.output.temp.RenameMediaTool.javafx}"
                    includes="**/*.jar"/>
        <fx:application id="RenameMediaTool_id"
                        name="RenameMediaTool"
                        mainClass="com.thirtyonetensoftware.renamemediatool.Main"/>
        <fx:csstobin outdir="${artifact.output.temp.RenameMediaTool.javafx}">
            <fx:fileset dir="${artifact.output.temp.RenameMediaTool.javafx}"
                        includes="**/*.css"/>
        </fx:csstobin>
        <fx:jar destfile="${artifact.output.temp.RenameMediaTool.javafx}/RenameMediaTool_${application.version}.jar">
            <fx:application refid="RenameMediaTool_id"/>
            <fileset dir="${artifact.output.temp.RenameMediaTool.javafx}"
                     excludes="**/*.jar"/>
            <fx:resources>
                <fx:fileset refid="all_but_RenameMediaTool"/>
            </fx:resources>
            <manifest/>
        </fx:jar>
        <fx:deploy width="500"
                   height="600"
                   updatemode="background"
                   outdir="${artifact.output.temp.RenameMediaTool.javafx}/deploy"
                   outfile="RenameMediaTool">
            <fx:platform basedir="${jdk.home.1.8}"/>
            <fx:permissions elevated="true"/>
            <fx:application refid="RenameMediaTool_id"/>
            <fx:info title="RenameMediaTool"
                     vendor="31Ten Software"/>
            <fx:resources>
                <fx:fileset refid="all_RenameMediaTool"/>
            </fx:resources>
        </fx:deploy>
        <property name="artifact.sign.vendor.RenameMediaTool"
                  value="CN=31Ten Software"/>
        <signjar alias="${keystore.alias}"
                 keystore="${keystore}"
                 storepass="${keystore.password}"
                 keypass="${alias.password}">
                 <!--tsaurl="http://tsa.safecreative.org/">-->
            <!-- can only use the safecreateive.org tsa 5 times a day -->
            <fileset dir="${artifact.output.temp.RenameMediaTool.javafx}/deploy">
                <include name="*.jar"/>
            </fileset>
        </signjar>
        <copy todir="${artifact.output.renamemediatool.javafx}">
            <fileset dir="${artifact.output.temp.RenameMediaTool.javafx}/deploy"/>
        </copy>

        <delete includeemptydirs="true">
            <fileset dir="${artifact.output.temp.RenameMediaTool.javafx}"/>
        </delete>
    </target>

    <target name="init.artifact.renamemediatool.jar">
        <property name="artifact.output.temp.renamemediatool.jar.dir" value="${artifacts.temp.dir}/jar"/>
        <property name="artifact.output.temp.renamemediatool.jar"
                  value="${artifacts.temp.dir}/jar/RenameMediaTool_${application.version}.jar"/>
    </target>

    <target name="artifact.renamemediatool.jar"
            depends="init.artifact.renamemediatool.jar, clean.artifact.renamemediatool.jar, compile.module.renamemediatool"
            description="Build &#39;RenameMediaTool jar&#39; artifact">
        <mkdir dir="${artifact.output.temp.renamemediatool.jar.dir}"/>
        <jar destfile="${artifact.output.temp.renamemediatool.jar}"
             duplicate="preserve"
             filesetmanifest="mergewithoutmain">
            <zipfileset dir="${renamemediatool.output.dir}"/>
            <zipfileset
                    src="${path.variable.maven_repository}/org/apache/sanselan/sanselan/0.97-incubator/sanselan-0.97-incubator.jar"/>

            <manifest>
                <attribute name="Manifest-Version"
                           value="${application.version}"/>
                <attribute name="Main-Class"
                           value="com.thirtyonetensoftware.renamemediatool.Main"/>
            </manifest>
        </jar>

        <mkdir dir="${artifact.output.renamemediatool.jar}"/>
        <copy file="${artifact.output.temp.renamemediatool.jar}"
              tofile="${artifact.output.renamemediatool.jar}/RenameMediaTool_${application.version}.jar"/>

        <delete includeemptydirs="true">
            <fileset dir="${artifact.output.temp.renamemediatool.jar.dir}"/>
        </delete>
    </target>
</project>